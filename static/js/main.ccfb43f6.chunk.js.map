{"version":3,"sources":["features/cameraSlice.js","WebcamCapture.js","firebase.js","features/appSlice.js","Preview.js","Chat.js","Chats.js","ChatView.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["cameraSlice","createSlice","name","initialState","cameraImage","reducers","setCameraImage","state","action","payload","resetCameraImage","actions","selectCameraImage","camera","videoConstraints","WebcamCapture","webcamRef","useRef","dispatch","useDispatch","history","useHistory","capture","useCallback","imageSrc","current","getScreenshot","push","className","audio","height","ref","screenshotFormat","width","onClick","fontSize","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","storage","provider","GoogleAuthProvider","appSlice","user","selectedImage","login","logout","selectImage","resetImage","selectUser","reserImage","app","selectSelectedImage","Preview","useSelector","useEffect","replace","src","alt","id","uuid","putString","on","error","console","log","child","getDownloadURL","then","url","collection","add","imageUrl","username","read","profilePic","timestamp","FieldValue","serverTimestamp","Chat","doc","update","Avatar","date","Date","toDate","toUTCString","Chats","useState","posts","setPosts","orderBy","onSnapshot","snapshot","docs","map","data","signOut","placeholder","type","ChatView","exit","isPlaying","duration","strokeWidth","size","colors","remainingTime","Login","Button","variant","signInWithPopup","result","displayName","photoURL","uid","catch","alert","message","App","onAuthStateChanged","authUser","path","exact","store","configureStore","reducer","appReducer","cameraReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4UAEaA,EAAcC,YAAY,CACnCC,KAAM,SACNC,aAAc,CACVC,YAAa,MAEjBC,SAAU,CACNC,eAAgB,SAACC,EAAOC,GACpBD,EAAMH,YAAcI,EAAOC,SAE/BC,iBAAkB,SAACH,GACfA,EAAMH,YAAc,SAKzB,EAA6CJ,EAAYW,QAAjDL,EAAR,EAAQA,eAAgBI,EAAxB,EAAwBA,iBAElBE,EAAoB,SAACL,GAAD,OAAWA,EAAMM,OAAOT,aAE1CJ,IAAf,Q,eCZMc,EACK,IADLA,EAEM,IAiCGC,MA7Bf,WACI,IAAMC,EAAYC,iBAAO,MACnBC,EAAWC,cACXC,EAAUC,cAEVC,EAAUC,uBAAY,WACxB,IAAMC,EAAWR,EAAUS,QAAQC,gBACnCR,EAASZ,EAAekB,IACxBJ,EAAQO,KAAK,cACd,CAACX,IAEJ,OACI,sBAAKY,UAAU,gBAAf,UACI,cAAC,IAAD,CACIC,OAAO,EACPC,OAAQhB,EACRiB,IAAKf,EACLgB,iBAAiB,aACjBC,MAAOnB,IAEX,cAAC,IAAD,CACIc,UAAU,wBACVM,QAASZ,EACTa,SAAS,c,2LCzBnBC,EADcC,IAASC,cATN,CACnBC,OAAQ,0CACRC,WAAY,uCACZC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,8CAIYC,YACjBC,EAAOT,IAASS,OAChBC,EAAUV,IAASU,UACnBC,EAAW,IAAIX,IAASS,KAAKG,mBCdtBC,EAAWjD,YAAY,CAClCC,KAAM,MACNC,aAAc,CACZgD,KAAM,KACNC,cAAe,MAEjB/C,SAAU,CACRgD,MAAO,SAAC9C,EAAOC,GACbD,EAAM4C,KAAO3C,EAAOC,SAEtB6C,OAAQ,SAAC/C,GACPA,EAAM4C,KAAO,MAEfI,YAAa,SAAChD,EAAOC,GACnBD,EAAM6C,cAAgB5C,EAAOC,SAE/B+C,WAAY,SAACjD,GACXA,EAAM6C,cAAgB,SAKrB,EAAmDF,EAASvC,QAApD0C,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAAQC,GAAvB,EAAuBA,YAEjBE,IAFN,EAAoCC,WAEjB,SAACnD,GAAD,OAAWA,EAAMoD,IAAIR,OAElCS,GAAsB,SAACrD,GAAD,OAAWA,EAAMoD,IAAIP,eAEzCF,KAAf,QCyDeW,OApEf,WACI,IAAMzD,EAAc0D,YAAYlD,GAC1BQ,EAAUC,cACVH,EAAWC,cACXgC,EAAOW,YAAYL,IA2CzB,OAzCAM,qBAAU,WACF3D,GACAgB,EAAQ4C,QAAQ,OAEtB,CAAC5D,EAAagB,IAsCZ,sBAAKQ,UAAU,UAAf,UACI,cAAC,IAAD,CAAWA,UAAU,iBAAiBM,QArCzB,WACjBhB,EAASR,QAqCL,sBAAKkB,UAAU,wBAAf,UACI,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,OAEJ,qBAAKqC,IAAK7D,EAAa8D,IAAI,KAC3B,sBAAKhC,QA5CI,WACb,IAAMiC,EAAKC,cACQrB,EAAQhB,IAAR,gBAAqBoC,IAAME,UAAUjE,EAAa,YAE1DkE,GACP,gBACA,MACA,SAACC,GAEGC,QAAQC,IAAIF,MAEhB,WAEIxB,EACKhB,IAAI,SACJ2C,MAAMP,GACNQ,iBACAC,MAAK,SAACC,GACHzC,EAAG0C,WAAW,SAASC,IAAI,CACvBC,SAAUH,EACVI,SAAU9B,EAAK8B,SACfC,MAAM,EACNC,WAAYhC,EAAKgC,WACjBC,UAAW/C,IAASQ,UAAUwC,WAAWC,oBAE7ClE,EAAQ4C,QAAQ,iBAmBJpC,UAAU,kBAAlC,UACI,0CACA,cAAC,IAAD,CAAUA,UAAU,mBAAmBO,SAAS,iB,0GC3CjDoD,OA5Bf,YAAiE,IAAlDpB,EAAiD,EAAjDA,GAAGgB,EAA8C,EAA9CA,WAAWF,EAAmC,EAAnCA,SAASG,EAA0B,EAA1BA,UAAUJ,EAAgB,EAAhBA,SAASE,EAAO,EAAPA,KAC/ChE,EAAWC,cACXC,EAAUC,cAahB,OACI,sBAAKa,QAZI,WACLgD,IACAhE,EAASqC,GAAYyB,IACrB5C,EAAG0C,WAAW,SAASU,IAAIrB,GAAIsB,OAAO,CAClCP,MAAM,IAGV9D,EAAQO,KAAK,iBAKGC,UAAU,OAA9B,UACI,cAAC8D,GAAA,EAAD,CAAQ9D,UAAU,eAAeqC,IAAKkB,IACtC,sBAAKvD,UAAU,aAAf,UACI,6BAAKqD,IACL,+BAAKC,GAAQ,iBAAkB,IAAI,cAAC,KAAD,CAAcS,KAAM,IAAIC,KAAJ,OAASR,QAAT,IAASA,OAAT,EAASA,EAAWS,UAAUC,uBAGvFZ,GAAQ,cAAC,KAAD,CAAiBtD,UAAU,uBCwClCmE,OA5Df,WACI,MAA0BC,mBAAS,IAAnC,oBAAOC,EAAP,KAAcC,EAAd,KACM/C,EAAOW,YAAYL,IACnBvC,EAAWC,cACXC,EAAUC,cAkBhB,OAhBA0C,qBAAU,WACN3B,EAAG0C,WAAW,SACTqB,QAAQ,YAAa,QACrBC,YAAW,SAACC,GAAD,OACRH,EAASG,EAASC,KAAKC,KAAI,SAACf,GAAD,MAAS,CAChCrB,GAAIqB,EAAIrB,GACRqC,KAAMhB,EAAIgB,iBAGxB,IAQE,sBAAK5E,UAAU,QAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,cAAC8D,GAAA,EAAD,CACIzB,IAAKd,EAAKgC,WACVjD,QAAS,kBAAKY,EAAK2D,WACnB7E,UAAU,kBAEd,sBAAKA,UAAU,gBAAf,UACI,cAAC,KAAD,CAAYA,UAAU,sBACtB,uBAAO8E,YAAY,UAAUC,KAAK,YAEtC,cAAC,KAAD,CAAgB/E,UAAU,sBAE9B,qBAAKA,UAAU,eAAf,SACKqE,EAAMM,KAAI,gBAAEpC,EAAF,EAAEA,GAAF,IAAMqC,KAAOrB,EAAb,EAAaA,WAAWF,EAAxB,EAAwBA,SAASG,EAAjC,EAAiCA,UAAUJ,EAA3C,EAA2CA,SAASE,EAApD,EAAoDA,KAApD,OAEH,cAAC,GAAD,CAEIf,GAAIA,EACJgB,WAAYA,EACZF,SAAUA,EACVG,UAAWA,EACXJ,SAAUA,EACVE,KAAMA,GANDf,QAWrB,cAAC,IAAD,CACIvC,UAAU,oBACVM,QApCK,WACbhB,EAASR,KACTU,EAAQ4C,QAAQ,MAmCR7B,SAAS,c,gBClBVyE,OA1Cf,WACI,IAAMxD,EAAgBU,YAAYF,IAC5BxC,EAAUC,cAEhB0C,qBAAU,WACFX,GACAyD,MAEN,CAACzD,IAEH,IAAMyD,EAAO,WACTzF,EAAQ4C,QAAQ,WAGpB,OACI,sBAAKpC,UAAU,WAAf,UACI,qBAAKqC,IAAKb,EAAelB,QAAS2E,EAAM3C,IAAI,KAC5C,qBAAKtC,UAAU,kBAAf,SACI,cAAC,wBAAD,CACIkF,WAAS,EACTC,SAAU,GACVC,YAAa,EACbC,KAAM,GACNC,OAAQ,CACJ,CAAC,UAAW,KACZ,CAAC,UAAW,KACZ,CAAC,UAAW,MARpB,SAWK,YAAqB,IAAnBC,EAAkB,EAAlBA,cAKC,OAJqB,IAAlBA,GACCN,IAGGM,W,iBCXhBC,OAvBf,WACI,IAAMlG,EAAWC,cAYjB,OACI,qBAAKS,UAAU,QAAf,SACI,sBAAKA,UAAU,mBAAf,UACI,qBAAKqC,IAAI,sDAAsDC,IAAI,KACnE,cAACmD,GAAA,EAAD,CAAQC,QAAQ,WAAWpF,QAdxB,WACXY,EAAKyE,gBAAgBvE,GAAU4B,MAAK,SAAC4C,GACjCtG,EAASmC,EAAM,CACX4B,SAAUuC,EAAOrE,KAAKsE,YACtBtC,WAAYqC,EAAOrE,KAAKuE,SACxBvD,GAAIqD,EAAOrE,KAAKwE,UAGvBC,OAAM,SAACrD,GAAD,OAAUsD,MAAMtD,EAAMuD,aAMrB,2BCoCDC,OAhDf,WACE,IAAM5E,EAAOW,YAAYL,IACnBvC,EAAWC,cAkBjB,OAhBA4C,qBAAU,WACRjB,EAAKkF,oBAAmB,SAACC,GAErB/G,EADC+G,EAEC5E,EAAM,CACJ4B,SAAUgD,EAASR,YACnBtC,WAAY8C,EAASP,SACrBvD,GAAI8D,EAASN,MAIRrE,UAGb,IAGA,qBAAK1B,UAAU,MAAf,SACE,cAAC,IAAD,UACIuB,EAGA,qBAAKvB,UAAU,YAAf,SACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOsG,KAAK,cAAZ,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,SAAZ,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,WAAZ,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,IAAlB,SACE,cAAC,EAAD,WAdJ,cAAC,GAAD,SChCGE,GAAQC,YAAe,CAClCC,QAAS,CACP3E,IAAK4E,GACL1H,OAAQ2H,KCKQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUZ,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJa,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzE,MAAK,SAAC0E,GAClCA,EAAaC,iB","file":"static/js/main.ccfb43f6.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const cameraSlice = createSlice({\r\n    name: \"camera\",\r\n    initialState: {\r\n        cameraImage: null,\r\n    },\r\n    reducers: {\r\n        setCameraImage: (state, action)=> {\r\n            state.cameraImage = action.payload;\r\n        },\r\n        resetCameraImage: (state)=> {\r\n            state.cameraImage = null;\r\n        }\r\n    },\r\n});\r\n\r\nexport const { setCameraImage, resetCameraImage } = cameraSlice.actions;\r\n\r\nexport const selectCameraImage = (state) => state.camera.cameraImage;\r\n\r\nexport default cameraSlice.reducer;","import React, {useCallback, useRef, useState} from 'react';\r\nimport Webcam from 'react-webcam';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCameraImage } from './features/cameraSlice';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport './WebcamCapture.css';\r\n\r\nconst videoConstraints = {\r\n    width: 250,\r\n    height: 400,\r\n    facingMode: \"user\"\r\n};\r\n\r\nfunction WebcamCapture() {\r\n    const webcamRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const capture = useCallback(()=> {\r\n        const imageSrc = webcamRef.current.getScreenshot();\r\n        dispatch(setCameraImage(imageSrc));\r\n        history.push(\"/preview\");\r\n    }, [webcamRef])\r\n\r\n    return (\r\n        <div className=\"webcamCapture\">\r\n            <Webcam \r\n                audio={false}\r\n                height={videoConstraints.height}\r\n                ref={webcamRef}\r\n                screenshotFormat=\"image/jpeg\"\r\n                width={videoConstraints.width}\r\n            />\r\n            <RadioButtonUncheckedIcon\r\n                className='webcamCapture__button'\r\n                onClick={capture}\r\n                fontSize='large'\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WebcamCapture\r\n","import firebase from 'firebase';\r\n// import { initializeApp } from 'firebase/app'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDVkbYPQigGrHhH5klO2BgyJaMwdyRhwPY\",\r\n    authDomain: \"snapchat-clone-7c3a8.firebaseapp.com\",\r\n    projectId: \"snapchat-clone-7c3a8\",\r\n    storageBucket: \"snapchat-clone-7c3a8.appspot.com\",\r\n    messagingSenderId: \"593951720237\",\r\n    appId: \"1:593951720237:web:a69e21a2036325e67a09a4\"\r\n  };\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { db, auth, storage, provider };","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState: {\n    user: null,\n    selectedImage: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n    selectImage: (state, action) => {\n      state.selectedImage = action.payload;\n    },\n    resetImage: (state) => {\n      state.selectedImage = null;\n    },\n  },\n});\n\nexport const { login, logout, selectImage, reserImage } = appSlice.actions;\n\nexport const selectUser = (state) => state.app.user;\n\nexport const selectSelectedImage = (state) => state.app.selectedImage;\n\nexport default appSlice.reducer;\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { resetCameraImage, selectCameraImage } from './features/cameraSlice'\r\nimport './Preview.css'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport TextFieldsIcon from '@material-ui/icons/TextFields'\r\nimport CreateIcon from '@material-ui/icons/Create'\r\nimport NoteIcon from '@material-ui/icons/Note'\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote'\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile'\r\nimport CropIcon from '@material-ui/icons/Crop'\r\nimport TimerIcon from '@material-ui/icons/Timer'\r\nimport SendIcon from '@material-ui/icons/Send'\r\nimport { v4 as uuid } from \"uuid\"\r\nimport { db, storage } from './firebase';\r\nimport firebase from 'firebase';\r\nimport { selectUser } from './features/appSlice';\r\n\r\nfunction Preview() {\r\n    const cameraImage = useSelector(selectCameraImage);\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const user = useSelector(selectUser);\r\n\r\n    useEffect(()=>{\r\n        if(!cameraImage) {\r\n            history.replace(\"/\")\r\n        }\r\n    },[cameraImage, history])\r\n\r\n    const closePreview = ()=> {\r\n        dispatch(resetCameraImage());\r\n    }\r\n\r\n    const sendPost = ()=> {\r\n        const id = uuid();\r\n        const uploadTask = storage.ref(`posts/${id}`).putString(cameraImage, \"data_url\");\r\n\r\n        uploadTask.on(\r\n            \"state_changed\",\r\n            null,\r\n            (error)=> {\r\n                // Error Function\r\n                console.log(error);\r\n            },\r\n            ()=> {\r\n                // Complete Function\r\n                storage\r\n                    .ref(\"posts\")\r\n                    .child(id)\r\n                    .getDownloadURL()\r\n                    .then((url)=> {\r\n                        db.collection(\"posts\").add({\r\n                            imageUrl: url,\r\n                            username: user.username,\r\n                            read: false,\r\n                            profilePic: user.profilePic,\r\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                        });\r\n                        history.replace(\"/chats\");\r\n                    })\r\n            }\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <div className=\"preview\">\r\n            <CloseIcon className=\"preview__close\" onClick={closePreview} />\r\n            <div className=\"preview__toolbarRight\">\r\n                <TextFieldsIcon />\r\n                <CreateIcon />\r\n                <NoteIcon />\r\n                <MusicNoteIcon />\r\n                <AttachFileIcon />\r\n                <CropIcon />\r\n                <TimerIcon />\r\n            </div>\r\n            <img src={cameraImage} alt=\"\" />\r\n            <div onClick={sendPost} className=\"preview__footer\">\r\n                <h2>Send Now</h2>\r\n                <SendIcon className=\"preview_sendIcon\" fontSize=\"small\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preview\r\n","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './Chat.css'\r\nimport StopRoundedIcon from '@material-ui/icons/StopRounded'\r\nimport ReactTimeago from 'react-timeago'\r\nimport { selectImage } from './features/appSlice'\r\nimport { useDispatch } from 'react-redux'\r\nimport { db } from './firebase'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nfunction Chat({id,profilePic,username,timestamp,imageUrl,read}) {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    \r\n    const open = () => {\r\n        if(!read){\r\n            dispatch(selectImage(imageUrl));\r\n            db.collection('posts').doc(id).update({\r\n                read: true,\r\n            });\r\n\r\n            history.push(\"/chats/view\");\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <div onClick={open} className=\"chat\">\r\n            <Avatar className=\"chat__avatar\" src={profilePic} />\r\n            <div className=\"chat__info\">\r\n                <h4>{username}</h4>\r\n                <p>{!read && \"Tap to view - \"}{\" \"}<ReactTimeago date={new Date(timestamp?.toDate()).toUTCString()} /></p>\r\n            </div>\r\n\r\n            {!read && <StopRoundedIcon className=\"chat__readIcon\" />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import { Avatar } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport './Chats.css'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport ChatBubbleIcon from '@material-ui/icons/ChatBubble'\r\nimport { auth, db } from './firebase'\r\nimport Chat from './Chat'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { selectUser } from './features/appSlice'\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked'\r\nimport { useHistory } from 'react-router'\r\nimport { resetCameraImage } from './features/cameraSlice'\r\n\r\nfunction Chats() {\r\n    const [posts, setPosts] = useState([]);\r\n    const user = useSelector(selectUser);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        db.collection('posts')\r\n            .orderBy('timestamp', 'desc')\r\n            .onSnapshot((snapshot)=>\r\n                setPosts(snapshot.docs.map((doc)=> ({\r\n                    id: doc.id,\r\n                    data: doc.data(),\r\n                })))\r\n            );\r\n    },[]);\r\n\r\n    const takeSnap = ()=> {\r\n        dispatch(resetCameraImage());\r\n        history.replace(\"/\");\r\n    }\r\n    \r\n    return (\r\n        <div className=\"chats\">\r\n            <div className=\"chats__header\">\r\n                <Avatar\r\n                    src={user.profilePic} \r\n                    onClick={()=> auth.signOut()}\r\n                    className=\"chats__avatar\" \r\n                />\r\n                <div className=\"chats__search\">\r\n                    <SearchIcon className=\"chats__searchIcon\" />\r\n                    <input placeholder=\"Friends\" type=\"text\" />\r\n                </div>\r\n                <ChatBubbleIcon className=\"chats_chatIcon\" />\r\n            </div>\r\n            <div className=\"chats__posts\">\r\n                {posts.map(({id, data: {profilePic,username,timestamp,imageUrl,read},\r\n                    })=> (\r\n                        <Chat \r\n                            key={id}\r\n                            id={id}\r\n                            profilePic={profilePic}\r\n                            username={username}\r\n                            timestamp={timestamp}\r\n                            imageUrl={imageUrl}\r\n                            read={read}\r\n                        />\r\n                    )\r\n                )}\r\n            </div>\r\n            <RadioButtonUncheckedIcon \r\n                className=\"chats_takePicIcon\"\r\n                onClick={takeSnap}\r\n                fontSize=\"large\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chats\r\n","import React, { useEffect } from 'react'\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\r\nimport { useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom';\r\nimport './ChatView.css'\r\nimport { selectSelectedImage } from './features/appSlice'\r\n\r\nfunction ChatView() {\r\n    const selectedImage = useSelector(selectSelectedImage);\r\n    const history = useHistory();\r\n\r\n    useEffect(()=> {\r\n        if(!selectedImage){\r\n            exit();\r\n        }\r\n    },[selectedImage])\r\n    \r\n    const exit = ()=> {\r\n        history.replace(\"/chats\")\r\n    }\r\n    \r\n    return (\r\n        <div className=\"chatView\">\r\n            <img src={selectedImage} onClick={exit} alt=\"\" />\r\n            <div className=\"chatView__timer\">\r\n                <CountdownCircleTimer\r\n                    isPlaying\r\n                    duration={10}\r\n                    strokeWidth={6}\r\n                    size={34}\r\n                    colors={[\r\n                        [\"#004777\", 0.33],\r\n                        [\"#F7B801\", 0.33],\r\n                        [\"#A30000\", 0.33],\r\n                    ]}\r\n                >\r\n                    {({remainingTime})=> {\r\n                        if(remainingTime === 0){\r\n                            exit();\r\n                        }\r\n                        \r\n                        return remainingTime\r\n                    }}\r\n                </CountdownCircleTimer>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatView\r\n","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { login } from './features/appSlice';\r\nimport { auth, provider } from './firebase';\r\nimport './Login.css'\r\n\r\nfunction Login() {\r\n    const dispatch = useDispatch();\r\n\r\n    const signIn = ()=> {\r\n        auth.signInWithPopup(provider).then((result)=> {\r\n            dispatch(login({\r\n                username: result.user.displayName,\r\n                profilePic: result.user.photoURL,\r\n                id: result.user.uid,\r\n            }));\r\n        })\r\n        .catch((error)=> alert(error.message));\r\n    }\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__container\">\r\n                <img src=\"https://scx2.b-cdn.net/gfx/news/2017/1-snapchat.jpg\" alt=\"\" />\r\n                <Button variant=\"outlined\" onClick={signIn}>Sign In</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport WebcamCapture from './WebcamCapture';\nimport Preview from './Preview';\nimport Chats from './Chats';\nimport ChatView from './ChatView';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login, logout, selectUser } from './features/appSlice';\nimport Login from './Login';\nimport { auth } from './firebase';\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  useEffect(()=> {\n    auth.onAuthStateChanged((authUser)=> {\n      if(authUser){\n        dispatch(\n          login({\n            username: authUser.displayName,\n            profilePic: authUser.photoURL,\n            id: authUser.uid,\n          })\n        );\n      } else {\n        dispatch(logout());\n      }\n    })\n  },[])\n  \n  return (\n    <div className=\"app\">\n      <Router>\n        {!user ? (\n          <Login />\n        ) : (\n          <div className=\"app__body\">\n          <Switch>\n            <Route path=\"/chats/view\">\n              <ChatView />\n            </Route>\n            <Route path=\"/chats\">\n              <Chats />\n            </Route>\n            <Route path=\"/preview\">\n              <Preview />\n            </Route>\n            <Route exact path=\"/\">\n              <WebcamCapture />\n            </Route>\n          </Switch>\n        </div>\n        )}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport appReducer from '../features/appSlice';\nimport cameraReducer from '../features/cameraSlice';\n\nexport const store = configureStore({\n  reducer: {\n    app: appReducer,\n    camera: cameraReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}